import React, { useEffect, useState } from 'react';
import './PasswordTableStyles.css';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableContainer, 
  TableHead, 
  TableRow, 
  Typography, 
  Box,
  Chip,
  Skeleton,
  Alert,
  IconButton,
  Tooltip,
  Card,
  CardContent,
  useMediaQuery,
  useTheme
} from '@mui/material';
import api from '../api/axios';
import LinkIcon from '@mui/icons-material/Link';
import VisibilityIcon from '@mui/icons-material/Visibility'; // VisibilityIcon 임포트 추가
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';
import DescriptionIcon from '@mui/icons-material/Description';

// 카테고리 아이콘 유틸리티 가져오기
import { getCategoryIcon } from '../utils/categoryIcons';
import { getAllCategories } from '../api/categoryApi';
import type { Category } from '../types/category';

import PasswordDetailDialog from './PasswordDetailDialog';
import ShowPasswordDialog from './ShowPasswordDialog'; // ShowPasswordDialog 임포트 추가

interface PasswordItem {
  id: number;
  title: string;
  url?: string;
  username: string;
  password: string;
  notes?: string;
  site?: string;
  description?: string;
  category?: string;
  createdAt: string;
  updatedAt: string;
}

interface PasswordTableProps {
  refreshKey?: number;
  onRefresh?: () => void;
  categoryFilter?: string;
}

const PasswordTable: React.FC<PasswordTableProps> = ({ refreshKey, onRefresh, categoryFilter }) => {
  const [passwords, setPasswords] = useState<PasswordItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [detailOpen, setDetailOpen] = useState(false);
  const [passwordDetail, setPasswordDetail] = useState<PasswordItem | null>(null);
  const [categoryIconMap, setCategoryIconMap] = useState<{[key: string]: string}>({});
  const [categoryColorMap, setCategoryColorMap] = useState<{[key: string]: string}>({});
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));

  // 비밀번호 표시 다이얼로그 상태
  const [showPasswordDialogOpen, setShowPasswordDialogOpen] = useState(false);
  const [currentPasswordForDialog, setCurrentPasswordForDialog] = useState('');
  const [currentPasswordTitleForDialog, setCurrentPasswordTitleForDialog] = useState('');

  // 카테고리 정보 가져오기
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const categoriesData = await getAllCategories();
        
        // 카테고리 이름과 아이콘, 색상 매핑
        const iconMap: {[key: string]: string} = {};
        const colorMap: {[key: string]: string} = {};
        categoriesData.forEach((cat: Category) => {
          iconMap[cat.name] = cat.icon;
          colorMap[cat.name] = cat.color;
        });
        setCategoryIconMap(iconMap);
        setCategoryColorMap(colorMap);
      } catch (err: any) {
        console.error('카테고리 정보를 가져오는 중 오류가 발생했습니다:', err);
      }
    };
    fetchCategories();
  }, []);

  useEffect(() => {
    const fetchPasswords = async () => {
      try {
        const token = localStorage.getItem('token');
        const res = await api.get('/passwords?decrypt=true', {
          headers: { Authorization: `Bearer ${token}` }
        });
        let filteredPasswords = res.data.data || [];
        
        // 카테고리 필터링 적용
        if (categoryFilter) {
          filteredPasswords = filteredPasswords.filter(
            (pw: PasswordItem) => pw.category === categoryFilter
          );
        }
        
        setPasswords(filteredPasswords);
      } catch (err: any) {
        setError(err.response?.data?.message || '불러오기 오류');
      } finally {
        setLoading(false);
      }
    };
    fetchPasswords();
  }, [refreshKey, categoryFilter]);

  // 비밀번호 표시 다이얼로그 핸들러
  const handleOpenShowPasswordDialog = (passwordValue: string, title: string) => {
    setCurrentPasswordForDialog(passwordValue);
    setCurrentPasswordTitleForDialog(title);
    setShowPasswordDialogOpen(true);
  };

  const handleCloseShowPasswordDialog = () => {
    setShowPasswordDialogOpen(false);
    setCurrentPasswordForDialog('');
    setCurrentPasswordTitleForDialog('');
  };

  if (error) {
    return (
      <Alert severity="error" sx={{ mt: 2, mb: 2 }}>
        {error}
      </Alert>
    );
  }

  return (
    <>
      {loading ? (
        // Loading skeleton - 모바일 최적화
        <Box sx={{ p: { xs: 1, sm: 2 }, width: '100%' }}>
          {isMobile ? (
            // 모바일용 스켈레톤
            [...Array(3)].map((_, index) => (
              <Box key={index} sx={{ mb: 2 }}>
                <Skeleton variant="rectangular" height={120} sx={{ borderRadius: 1.5, mb: 1 }} />
              </Box>
            ))
          ) : (
            // 데스크탑용 스켈레톤
            [...Array(4)].map((_, index) => (
              <Box key={index} sx={{ display: 'flex', mb: 2 }}>
                <Skeleton variant="rectangular" width="25%" height={40} sx={{ mr: 1 }} />
                <Skeleton variant="rectangular" width="25%" height={40} sx={{ mr: 1 }} />
                <Skeleton variant="rectangular" width="25%" height={40} sx={{ mr: 1 }} />
                <Skeleton variant="rectangular" width="25%" height={40} />
              </Box>
            ))
          )}
        </Box>
      ) : passwords.length === 0 ? (
        // Empty state - 모바일 최적화
        <Box sx={{ p: { xs: 2, sm: 4 }, textAlign: 'center', width: '100%' }}>
          <InfoOutlinedIcon sx={{ fontSize: { xs: 36, sm: 48 }, color: 'text.secondary', mb: 2 }} />
          <Typography variant="h6" color="text.secondary" sx={{ fontFamily: 'apple gothic', fontSize: { xs: '1rem', sm: '1.25rem' } }}>
            저장된 비밀번호가 없습니다
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1, fontFamily: 'apple gothic', fontSize: { xs: '0.8rem', sm: '0.875rem' } }}>
            '비밀번호 추가' 버튼을 클릭하여 새 비밀번호를 저장하세요
          </Typography>
        </Box>
      ) : isMobile ? (
        // 모바일용 카드 뷰
        <Box sx={{ 
          p: { xs: 1, sm: 1.5 }, 
          width: '100%', 
          boxSizing: 'border-box'
        }}>
          <Box sx={{ 
            display: 'grid', 
            gridGap: '0px',
            width: '100%',
            boxSizing: 'border-box',
            overflowX: 'hidden',
            backgroundColor: '#1a1a1a',
            borderRadius: '8px'
          }}>
            {passwords.map((pw) => (
              <Card 
                key={pw.id}
                className="password-item"
                elevation={0} 
                sx={{ 
                  cursor: 'pointer',
                  width: '100%',
                  boxSizing: 'border-box',
                  backgroundColor: '#1a1a1a',
                  color: '#ffffff'
                }}
                  onClick={() => { setPasswordDetail(pw); setDetailOpen(true); }}
                >
                  <CardContent sx={{ p: { xs: 1.2, sm: 2 }, width: '100%', boxSizing: 'border-box', backgroundColor: '#1a1a1a', color: '#ffffff' }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1.5 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {pw.category && (
                          <Chip 
                            icon={getCategoryIcon(
                              categoryIconMap[pw.category || ''], 
                              { fontSize: '0.9rem' }, 
                              categoryColorMap[pw.category || ''] || 'inherit'
                            )}
                            label={pw.category} 
                            size="small" 
                            sx={{ 
                              height: 22, 
                              fontSize: '0.7rem',
                              fontFamily: 'apple gothic',
                              mr: 1,
                              borderColor: categoryColorMap[pw.category || ''] || 'inherit',
                              '& .MuiChip-label': {
                                color: categoryColorMap[pw.category || ''] || 'inherit'
                              }
                            }} 
                            variant="outlined" 
                          />
                        )}
                        <Typography variant="subtitle1" className="password-title" sx={{ fontWeight: 600, fontFamily: 'apple gothic', fontSize: { xs: '1.1rem', sm: '1.2rem' } }}>
                          {pw.title}
                        </Typography>
                      </Box>
                      {pw.url && (
                        <IconButton 
                          size="small" 
                          color="primary"
                          onClick={(e) => {
                            e.stopPropagation();
                            window.open(pw.url?.startsWith('http') ? pw.url : `https://${pw.url}`, '_blank');
                          }}
                        >
                          <LinkIcon fontSize="small" />
                        </IconButton>
                      )}
                    </Box>
                    
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1, justifyContent: 'space-between' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        <AccountCircleIcon fontSize="small" className="username-icon" sx={{ mr: 1 }} />
                        <Typography variant="body2" className="password-username" sx={{ fontFamily: 'apple gothic' }}>
                          {pw.username || '-'}
                        </Typography>
                      </Box>
                      <Box 
                        sx={{
                          display: 'flex', 
                          alignItems: 'center', 
                          cursor: 'pointer', 
                          border: `1px solid ${theme.palette.success.main}`,
                          padding: theme.spacing(0.5, 1),
                          borderRadius: theme.shape.borderRadius,
                          '&:hover': {
                            backgroundColor: theme.palette.action.hover
                          }
                        }}
                        onClick={(e) => {
                          e.stopPropagation(); // Prevent Card's onClick
                          handleOpenShowPasswordDialog(pw.password, pw.title);
                        }}
                      >
                        <Typography variant="body2" sx={{ fontFamily: 'apple gothic', mr: 0.5, lineHeight: 'initial' }}>
                          {pw.password ? `${pw.password.charAt(0)}***` : '***'}
                        </Typography>
                        <IconButton 
                          size="small"
                          // onClick is now on the parent Box, so remove from here or ensure it doesn't conflict
                          // For simplicity, we'll rely on the parent's onClick and make this IconButton purely visual
                          sx={{ p: 0.25 }} // 패딩 조정
                          disableRipple // Optional: to make it feel more like part of a single button
                        >
                          <VisibilityIcon fontSize="small" />
                        </IconButton>
                      </Box>
                    </Box>
                    
                    {pw.notes && (
                      <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                        <DescriptionIcon fontSize="small" sx={{ mr: 1 }} />
                        <Typography 
                          variant="body2" 
                          className="notes-text"
                          sx={{ 
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            whiteSpace: 'nowrap',
                            fontFamily: 'apple gothic'
                          }}
                        >
                          {pw.notes}
                        </Typography>
                      </Box>
                    )}
                    
                    {/* 카테고리는 사이트명 왼쪽으로 이동했습니다 */}
                  </CardContent>
                </Card>
            ))}
          </Box>
        </Box>
      ) : (
        // 데스크탑용 테이블 뷰
        <TableContainer sx={{ width: '100%', boxSizing: 'border-box', px: { xs: 1, sm: 2 } }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell sx={{ 
                  fontWeight: 600, 
                  backgroundColor: 'rgba(0, 0, 0, 0.02)',
                  borderBottom: '2px solid rgba(0, 0, 0, 0.1)',
                  fontFamily: 'apple gothic'
                }}>
                  카테고리/사이트
                </TableCell>
                <TableCell sx={{ 
                  fontWeight: 600, 
                  backgroundColor: 'rgba(0, 0, 0, 0.02)',
                  borderBottom: '2px solid rgba(0, 0, 0, 0.1)',
                  fontFamily: 'apple gothic'
                }}>
                  아이디/이메일
                </TableCell>
                <TableCell sx={{ 
                  fontWeight: 600, 
                  backgroundColor: 'rgba(0, 0, 0, 0.02)',
                  borderBottom: '2px solid rgba(0, 0, 0, 0.1)',
                  fontFamily: 'apple gothic'
                }}>
                  비밀번호
                </TableCell>
                <TableCell sx={{ 
                  fontWeight: 600, 
                  backgroundColor: 'rgba(0, 0, 0, 0.02)',
                  borderBottom: '2px solid rgba(0, 0, 0, 0.1)',
                  fontFamily: 'apple gothic'
                }}>
                  설명
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {passwords.map((pw) => (
                <TableRow 
                  key={pw.id} 
                  hover 
                  sx={{ 
                    cursor: 'pointer',
                    '&:hover': {
                      backgroundColor: 'rgba(58, 123, 213, 0.04)'
                    },
                    transition: 'background-color 0.2s'
                  }} 
                  onClick={() => { setPasswordDetail(pw); setDetailOpen(true); }}
                >
                  <TableCell>
                    <Box sx={{ display: 'flex', alignItems: 'center' }}>
                      {pw.category && (
                        <Chip 
                          icon={getCategoryIcon(
                            categoryIconMap[pw.category || ''], 
                            { fontSize: '0.9rem' }, 
                            categoryColorMap[pw.category || ''] || 'inherit'
                          )}
                          label={pw.category} 
                          size="small" 
                          sx={{ 
                            height: 24, 
                            fontSize: '0.7rem',
                            fontFamily: 'apple gothic',
                            mr: 1,
                            borderColor: categoryColorMap[pw.category || ''] || 'inherit',
                            '& .MuiChip-label': {
                              color: categoryColorMap[pw.category || ''] || 'inherit'
                            }
                          }} 
                          variant="outlined" 
                        />
                      )}
                      <Typography sx={{ fontFamily: 'apple gothic' }}>{pw.title}</Typography>
                      {pw.url && (
                        <Tooltip title="사이트 방문">
                          <IconButton 
                            size="small" 
                            sx={{ ml: 1 }}
                            onClick={(e) => {
                              e.stopPropagation();
                              window.open(pw.url?.startsWith('http') ? pw.url : `https://${pw.url}`, '_blank');
                            }}
                          >
                            <LinkIcon fontSize="small" color="primary" />
                          </IconButton>
                        </Tooltip>
                      )}
                    </Box>
                  </TableCell>
                  <TableCell sx={{ fontFamily: 'apple gothic' }}>{pw.username || '-'}</TableCell>
                  <TableCell>
                    <Box 
                      sx={{
                        display: 'flex', 
                        alignItems: 'center', 
                        cursor: 'pointer', 
                        border: `1px solid ${theme.palette.success.main}`,
                        padding: theme.spacing(0.5, 1),
                        borderRadius: theme.shape.borderRadius,
                        // width: 'fit-content', // Ensure the box only takes necessary width
                        '&:hover': {
                          backgroundColor: theme.palette.action.hover
                        }
                      }}
                      onClick={(e) => {
                        e.stopPropagation(); // Prevent TableRow's onClick
                        handleOpenShowPasswordDialog(pw.password, pw.title);
                      }}
                    >
                      <Typography variant="body2" sx={{ fontFamily: 'apple gothic', mr: 0.5, lineHeight: 'initial' }}>
                        {pw.password ? `${pw.password.charAt(0)}***` : '***'}
                      </Typography>
                      <IconButton 
                        size="small"
                        sx={{ p: 0.25 }}
                        disableRipple
                      >
                        <VisibilityIcon fontSize="small" />
                      </IconButton>
                    </Box>
                  </TableCell>
                  <TableCell>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        maxWidth: 200,
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap',
                        fontFamily: 'apple gothic'
                      }}
                    >
                      {pw.notes || '-'}
                    </Typography>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
      <PasswordDetailDialog
        open={detailOpen}
        onClose={() => setDetailOpen(false)}
        password={passwordDetail}
        onUpdated={() => { 
          if (onRefresh) onRefresh(); 
          const fetchPasswordsInternal = async () => {
            setLoading(true); 
            try {
              const token = localStorage.getItem('token');
              const res = await api.get('/passwords?decrypt=true', {
                headers: { Authorization: `Bearer ${token}` }
              });
              let filteredPasswords = res.data.data || [];
              if (categoryFilter) {
                filteredPasswords = filteredPasswords.filter(
                  (item: PasswordItem) => item.category === categoryFilter
                );
              }
              setPasswords(filteredPasswords);
            } catch (err: any) {
              setError(err.response?.data?.message || '불러오기 오류');
            } finally {
              setLoading(false);
            }
          };
          fetchPasswordsInternal(); 
        }}
      />
      <ShowPasswordDialog 
        open={showPasswordDialogOpen}
        onClose={handleCloseShowPasswordDialog}
        passwordValue={currentPasswordForDialog}
        title={currentPasswordTitleForDialog}
      />    
    </>
  );
};

export default PasswordTable;
